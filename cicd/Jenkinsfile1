pipeline {
  agent any
  tools {
  maven 'M2_HOME'
  jdk 'JAVA_HOME'  
  }

  environment{
    AWS_REGION = 'us-east-1'
    BRANCH_NAME = 'main'
    GIT_PROJECT_URL = 'https://github.com/vivithegemini/myclinic.git'
    GIT_CRED = 'github-creds'
    SONAQUBE_CRED = 'sonarqube-credes'
    SONAQUBE_INSTALLATION = 'sonar-server'
    SCANNER_HOME = tool 'sonar-env'
    APP_NAME = 'pipeline-pet-clinic-vivi'
    JFROG_CRED = 'jfrog-creds'
    ARTIFACTPATH = 'target/*.jar'
    ARTIFACTTARGETPATH = 'release_${BUILD_ID}.jar'
    ARTIFACTORY_URL = 'http://3.235.154.93:8082/artifactory/'
    REPO = 'myclinic'
    IMAGE_ECR_REPO = 'myclinic'



  }
  stages{
    stage('Git checkout'){
        steps{
            git branch: "${BRANCH_NAME}", credentialsId: "${GIT_CRED}", \
                url: "${GIT_PROJECT_URL}"
        }
    }
    stage('Trivy Scan'){
            steps{
                 sh "trivy fs --format table -o maven_dependency.html ."
            }
        }
        stage('Unit Test'){
            steps{
                sh 'mvn clean'
                sh 'mvn compile -DskipTests'
            }
        }
        stage('Sonarqube Scan'){
            steps{
                withSonarQubeEnv(credentialsId: "${SONAQUBE_CRED}", \
                installationName: "${SONAQUBE_INSTALLATION}" ) {
              sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=${APP_NAME} -Dsonar.projectKey=${APP_NAME} \
                   -Dsonar.java.binaries=. '''
}
            }
        }
        stage('Quality Gate Check'){
            steps{
              script{
                 waitForQualityGate abortPipeline: false, credentialsId: "${SONAQUBE_CRED}" 
              }
            }
        }
        stage('Code Package'){
            steps{
                sh 'mvn package -DskipTests'
            }
        }
      
        stage('Upload Jar to Jfrog'){
            steps{
                withCredentials([usernamePassword(credentialsId: "${JFROG_CRED}", \
                 usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                    script {
                        // Define the artifact path and target location
                        //def artifactPath = 'target/*.jar'
                        //def targetPath = "release_${BUILD_ID}.jar"

                        // Upload the artifact using curl
                        sh """
                            curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} \
                                 -T ${ARTIFACTPATH} \
                                 ${ARTIFACTORY_URL}/${REPO}/${ARTIFACTTARGETPATH}
                        """
            }
        }
    }

}
        stage('DockerLogin'){
            steps{
              sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 954976287271.dkr.ecr.us-east-1.amazonaws.com'
        }
    }
        stage('dockerImageBuild'){
            steps{
              sh 'docker build -t myclinic .'
              sh ' docker build -t imageversion .'
    }
}
        stage('dockerImageTag'){
            steps{
              sh 'docker tag jenkins-ci:latest $IMAGE_ECR_REPO:latest'
              sh 'docker tag imageversion $IMAGE_ECR_REPO:v1.$BUILD_NUMBER'
        }
    }
        stage('PushImage'){
            steps{
              sh 'docker push $IMAGE_ECR_REPO:latest'
              sh 'docker push $IMAGE_ECR_REPO:v1.$BUILD_NUMBER'
        }
    }
  }
}
